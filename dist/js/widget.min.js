var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Validation=function(){"use strict";function e(e,t){var n=e.value.trim();return a.test(n)?parseFloat(n)>parseFloat(t):!1}function t(e,t){var n=e.value.trim();return a.test(n)?parseFloat(n)<parseFloat(t):!1}function n(e){var t=e.value.trim();return s.test(t)}function i(e){var t=e.value.trim(),n=!1;return"checkbox"===e.type||"radio"===e.type?e.checked===!0&&(n=!0):null!==t&&""!==t&&(n=!0),n}function r(e){var t=e.value.trim();return-1===t.indexOf("://")&&(t="http://"+t),o.test(t)}var o=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,s=/^(\-|\+)?([0-9]+|Infinity)$/,a=/^\-?[0-9]*\.?[0-9]+$/;return{isGreaterThan:e,isLessThan:t,isValidRequired:i,isValidURL:r,isValidNumber:n}}(),RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+t.color+"; ",r="font-size: "+t.size+"px; ",o="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",c="background-color: "+t.highlightColor+"; ";return"."+e+" {"+n+i+r+o+s+a+c+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,o){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,o):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&r(n.fontSetting.font.family,o))})}function i(e,t,n){var i=null,r="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",r)}function r(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}return{getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:r}}(),"undefined"!=typeof angular&&angular.module("risevision.widget.weather.config",[]).value("current","https://s3.amazonaws.com/widget-weather-test/0.1.0/dist/current.html").value("threeDay","https://s3.amazonaws.com/widget-weather-test/0.1.0/dist/three-day.html").value("currentAndThreeDay","https://s3.amazonaws.com/widget-weather-test/0.1.0/dist/current-and-three-day.html"),"undefined"==typeof config)var config={urlByName:decodeURI(decodeURIComponent("%68%74%74%70%3a%2f%2f%77%77%77%2e%74%69%6e%62%75%77%65%61%74%68%65%72%2e%63%6f%6d%2f%77%78%5f%66%65%65%64%2f%77%78%5f%63%75%72%72%65%6e%74%5f%65%78%74%65%6e%64%65%64%5f%62%79%5f%6e%61%6d%65%2e%70%68%70%3f%70%61%73%73%63%6f%64%65%3d%72%69%73%65%64%69%73%70%6c%61%79%25%37%43%64%6b%61%63%26%6d%65%74%72%69%63%3d%66%61%6c%73%65")),urlByLocation:decodeURI(decodeURIComponent("%68%74%74%70%3a%2f%2f%77%77%77%2e%74%69%6e%62%75%77%65%61%74%68%65%72%2e%63%6f%6d%2f%77%78%5f%66%65%65%64%2f%77%78%5f%63%75%72%72%65%6e%74%5f%65%78%74%65%6e%64%65%64%5f%62%79%5f%6c%61%74%6c%6f%6e%2e%70%68%70%3f%70%61%73%73%63%6f%64%65%3d%72%69%73%65%64%69%73%70%6c%61%79%25%37%43%64%6b%61%63%26%6d%65%74%72%69%63%3d%66%61%6c%73%65"))};var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather=function(e,t,n){"use strict";function i(){var n=f.address,i=null,o=null,s=null;"geolocation"===n?(i=new RiseVision.Weather.Geolocation(t),i.getWeather({success:r,error:c})):"display"===n?(o=new RiseVision.Weather.DisplayAddress(e),o.getWeather({success:r,error:c})):"custom"===n&&(s=new RiseVision.Weather.CustomAddress(t),s.getWeather(f.customAddress,{success:r,error:c}))}function r(e){var t="",r=null,a=null,c="",l="",m=0,h=0,p=!1,v=!1,w=null,A=[],R="",b=(new Date).getDay()+1,V=b+1>7?1:b+1,_=V+1>7?1:V+1;e?e.getElementsByTagName("cw_error").length>0?o():($(".container").show(),$(".error").hide(),n.init({fallbackLng:"en"},function(){if($(".container").i18n(),$.each(e.getElementsByTagName("observation"),function(e,n){return 0!==e&&(t=n.getAttribute("icon_name"),null!==t&&"cw_no_report_icon"!==t)?(r=this,!1):void 0}),null===r&&(r=e.getElementsByTagName("observation").length>1?e.getElementsByTagName("observation")[1]:e.getElementsByTagName("observation")[0]),r&&"three-day"!==f.layout&&(r.getAttribute("icon_name")?(s(r.getAttribute("icon_name"),$(".current-icon")),$(".current-icon").attr("title",r.getAttribute("description"))):$(".current-icon").hide(),$(".current-temp").html("celsius"===f.unit?u(r.getAttribute("temperature"))+"&#176;C":u(r.getAttribute("temperature"))+"&#176;F")),"custom"===f.description?($(".city").text(f.customDescription),p=!0):"service"===f.description&&(a=e.getElementsByTagName("location")[0],a&&(c=a.getAttribute("city_name"),a.getAttribute("state_name")&&(c+=", "+a.getAttribute("state_name")),$(".city").text(c),p=!0)),r&&(f.showHumidity?(l=n.t(r.getAttribute("wind_short")),isNaN(r.getAttribute("humidity"))||$(".humidity").text(n.t("humidity")+" "+r.getAttribute("humidity")+"%"),"mph"===f.windSpeed?r.getAttribute("wind_short")&&r.getAttribute("wind_speed")&&$(".wind").text(n.t("wind")+" "+l+" "+n.t("at")+" "+parseInt(r.getAttribute("wind_speed"))+" "+n.t("mph"),10):"kph"===f.windSpeed&&r.getAttribute("wind_short")&&r.getAttribute("wind_speed")&&(m=parseInt(r.getAttribute("wind_speed"),10),h=Math.round(1.609344*m),$(".wind").text(n.t("wind")+" "+l+" "+n.t("at")+" "+h+" "+n.t("kph"))),v=!0):$(".humidity-wind").hide()),p||v||$(".info").hide(),w=e.getElementsByTagName("forecast")){if("current"!==f.layout)for(var o=0;o<w.length;o++)R=parseInt(w[o].getAttribute("day_of_week"),10),R===b?A[0]=w[o]:R===V?A[1]=w[o]:R===_&&(A[2]=w[o]);$(".icon").each(function(e){A[e].getAttribute("icon_name")?(s(A[e].getAttribute("icon_name"),$(this)),$(this).attr("title",A[e].getAttribute("description"))):$(this).hide()}),$(".day-of-week").each(function(e){$(this).html(n.t(A[e].getAttribute("weekday").toLowerCase()))}),$(".temp").each(function(e){$(this).html(u(A[e].getAttribute("high_temp"))+"&#176; / "+u(A[e].getAttribute("low_temp"))+"&#176;")})}setTimeout(function(){i()},y)})):o(),g&&(g=!1,d())}function o(){g&&($(".container").hide(),$(".error").text("Unable to retrieve weather data for that location.").show()),setTimeout(function(){i()},v)}function s(e,t){var n=new Image,i="img/"+e+".png";n.onload=function(){t.attr("src",i),a()},n.onerror=function(){console.log("Image "+e+" not found on "+new Date+" for "+$(".city").text()),a()},n.src=i}function a(){m++,"current"===f.layout?1===m&&$(document).trigger("dataPopulated"):"three-day"===f.layout?3===m&&$(document).trigger("dataPopulated"):"current-and-three-day"===f.layout?4===m&&$(document).trigger("dataPopulated"):$(document).trigger("dataPopulated")}function c(e){e.length>0&&(console.log("Unable to connect to the weather service at "+new Date+". Please check your Internet connection."),setTimeout(function(){i()},v))}function u(e){return"celsius"===f.unit?parseInt(5*(e-32)/9,10):parseInt(e,10)}function d(){e.rpc.call("","rsevent_ready",null,h.getString("id"),!0,!0,!0,!0,!0)}function l(e,t){var n;if(Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]){if(Array.isArray(t)&&t.length>0){f=JSON.parse(t[0]);var r=[{"class":"current-tmep",fontSetting:f.currentTempFont},{"class":"forecast-temp",fontSetting:f.forecastTempFont},{"class":"forecast-day",fontSetting:f.forecastDayFont},{"class":"address",fontSetting:f.addressFont},{"class":"humidity",fontSetting:f.humidityFont}];p.loadFonts(r),document.body.style.background=f.background.color,f.terms||($(".container").hide(),$(".error").text("You must check the Acceptance setting in order to use this Gadget.").show(),d()),i()}}else Array.isArray(e)&&e.length>0&&"displayAddress"===e[0]&&Array.isArray(t)&&t.length>0&&(n=JSON.parse(t[0]))}var f,g=!0,m=0,h=new e.Prefs,p=RiseVision.Common.Utilities,y=18e5,v=6e4;return{setParams:l}}(gadgets,config,i18n);var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.Provider={},RiseVision.Weather.Provider=function(){"use strict";function e(e,t){var n={};n[gadgets.io.RequestParameters.CONTENT_TYPE]=gadgets.io.ContentType.DOM,gadgets.io.makeRequest(e,function(e){e&&e.data?t&&t.success&&"function"==typeof t.success&&t.success(e.data):e&&e.errors&&t&&t.error&&"function"==typeof t.error&&t.error(e.errors)},n)}return{getWeather:e}}();var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.Geolocation=function(e){"use strict";function t(i){var r="";navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(t){r=e.urlByLocation+"&lat="+t.coords.latitude+"&lon="+t.coords.longitude+"&dummy="+Math.ceil(100*Math.random()),RiseVision.Weather.Provider.getWeather(r,{success:function(e){i&&i.success&&"function"==typeof i.success&&i.success(e)},error:function(e){i&&i.error&&"function"==typeof i.error&&i.error(e)}})},function(){setTimeout(function(){t()},n),console.log("Unable to obtain geolocation position.")})}var n=6e4;return{getWeather:t}};var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.DisplayAddress=function(e){"use strict";function t(e,t){var n="",r="";Array.isArray(e)&&e.length>0&&"displayAddress"===e[0]&&(Array.isArray(t)&&t.length>0&&(r=JSON.parse(t[0]),n=n+"&name="+encodeURIComponent(r.city+","+r.province)+"&dummy="+Math.ceil(100*Math.random())),RiseVision.Weather.Provider.getWeather(n,{success:function(e){i&&i.success&&"function"==typeof i.success&&i.success(e)},error:function(e){i&&i.error&&"function"==typeof i.error&&i.error(e)}}))}function n(n){var r=(new e.Prefs).getString("id");i=n,r&&""!==r&&(e.rpc.register("rsparam_set_"+r,t),e.rpc.call("","rsparam_get",null,r,"displayAddress"))}var i=null;return{getWeather:n}};var RiseVision=RiseVision||{};RiseVision.Weather=RiseVision.Weather||{},RiseVision.Weather.CustomAddress=function(e){"use strict";function t(t,n){var i="";""!==t&&(i=e.urlByName+"&name="+encodeURIComponent(t)+"&dummy="+Math.ceil(100*Math.random()),RiseVision.Weather.Provider.getWeather(i,{success:function(e){n&&n.success&&"function"==typeof n.success&&n.success(e)},error:function(e){n&&n.error&&"function"==typeof n.error&&n.error(e)}}))}return{getWeather:t}},function(e,t,n,i){"use strict";var r=new i.Prefs,o=r.getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},n.setOnLoadCallback(function(){i.rpc.register("rsparam_set_"+o,RiseVision.Weather.setParams),i.rpc.call("","rsparam_get",null,o,["additionalParams"])})}(window,document,google,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-41395348-5"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,